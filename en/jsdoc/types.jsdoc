/**
Event handler. Takes any arguments passed to {@link Matreshka#trigger}
@callback eventHandler
@param {...*} options - Any arguments
@example
var eventHandler = function() {
	console.log(arguments); 
}
this.on('fyeah', eventHandler);
this.trigger('fyeah', 'foo', 'bar', 'baz'); // logs 'foo', 'bar', 'baz'
*/


/**
{@link Matreshka} instance
@typedef {object} matreshka
*/

/**
{@link Matreshka.Object} instance
@typedef {object} matreshkaObject
*/


/**
{@link Matreshka.Array} instance
@typedef {object} matreshkaArray
*/


/**
{@link $b Balalaika} collection
@typedef {array} balalaika
*/


/**
Event name or space-delimited list of event names.

> This is very brief list of event names. The full article about events is coming very soon. If you know Russian, take a look at  [this article](http://habrahabr.ru/company/matreshka/blog/267513/).

##### Custom events.
```js
this.on('myevent', function() {...});
this.trigger('myevent');
```

##### ``change:KEY`` which is triggered every time when a property is changed.
```js
this.on('change:x', function(evt) {...});
this.x = 42;
```

##### ``beforechange:KEY``  which is triggered every time before a property is changed.
```js
this.on('beforechange:x', function(evt) {...});
this.x = 42;
```

##### ``bind:KEY`` and ``bind`` which are triggered after data binding.
```js
//for any property
this.on('bind', function(evt) {...});
//for "x" property
this.on('bind:x', function(evt) {...});
this.bindNode('x', '.my-node');
```

##### ``delete:KEY`` and ``delete`` which are triggered after property removal.
```js
//for any property
this.on('delete', function(evt) {...});
//for "x" property
this.on('delete:x', function(evt) {...});
this.remove('x');
```

##### ``addevent:NAME`` and ``addevent`` which are triggered on event initialization.
```js
//for any event
this.on('addevent', function(evt) {...});
//for "someevent" event
this.on('addevent:someevent', function(evt) {...});
//the line below fires "addevent" and "addevent:someevent"
this.on('someevent', function(evt) {...});
```

##### ``DOM_EVENT::KEY``, where DOM_EVENT is a name of DOM event, KEY is a key. A handler is called when DOM_EVENT is triggered on a node bound to the KEY.
```js
this.bindNode('x', '.my-div');
this.on('click::x', function(evt) {
	alert('clicked ".my-div"');
});
```

##### ``DOM_EVENT::KEY(SELECTOR)``, where DOM_EVENT is a name of DOM event, KEY is a key, SELECTOR is a selector. A handler is called when DOM_EVENT is triggered on a node which matches the SELECTOR within a node bound to the KEY.
```html
<div class="my-div">
	<button class="my-button"></button>
</div>
```
```js
this.bindNode('x', '.my-div');
this.on('click::x(.my-button)', function(evt) {
	alert('clicked ".my-button"');
});
```

##### ``DOM_EVENT::(SELECTOR)``, where DOM_EVENT is a name of DOM event, SELECTOR is a selector. A handler is called when DOM_EVENT is triggered on a node which matches the SELECTOR within a sandbox.

```js
this.bindNode('sandbox', '.my-div');
this.on('click::(.my-button)', function(evt) {
	alert('clicked ".my-button"');
});
```
The same as:
```js
this.bindNode('sandbox', '.my-div');
this.on('click::sandbox(.my-button)', function(evt) {
	alert('clicked ".my-button"');
});
```

##### Delegated events: ``PATH@EVENT``, where PATH is a path to a target object whose events we want to listen, EVENT is an event name.
```js
this.on('a@someevent', function() {...});
this.on('a.b.c@change:d', function() {...});
```

If you need to listen an event of every item of {@link Matreshka.Array} or every data key of {@link Matreshka.Object}, you can use an asterisk "*" instead of specific  key.

```js
this.on('*@someevent', function() {...});
this.on('*.b.*.d@change:e', function() {...});
```

##### Any combinations. All events described above can be combined.
```js
this.on('x.y.z@click::(.my-selector)', function() {...});
```
@typedef {string} eventNames
*/


/**
``binder`` contains all information about how to synchronize instance property value with DOM node state. Every member of a binder uses HTML node as context (``this``)
@typedef {object} binder
@property {string|function} [on] - DOM event (or space-delimited list of events) which tells when node state is changed. Besides, it accepts function as value if you need to catch change arbitrarily
@property {function} [getValue] - A function which tells how to retrieve value (state) from HTML node when DOM event is fired
@property {function} [setValue] - A function which tells how to change DOM node when property value is changed
@property {function} [initialize] - A function which calls before binding is launched. For example it can initialize some jQuery plugin
@example
var binder = {
	on: 'click',
	getValue: function(options) {
		return this.value;
	} 
	setValue: function(v, options) {
		this.value = v;
	},
	initialize: function(options) {
		alert('Binder is initialized. Initial input value=' + this.value);
	}
};

this.bindNode( 'a', '.my-checkbox', binder );
@example
var binder = {
	on: function(callback) {
		this.onclick = callback;
	},
	getValue: function(options) {
		return this.value;
	} 
	setValue: function(v, options) {
		this.value = v;
	},
	initialize: function(options) {
		alert('Binder is initialized. Initial input value=' + this.value);
	}
};

this.bindNode( 'a', '.my-checkbox', binder );
*/


/**
Event object
@typedef {object} eventOptions
@desc An object which can contain service flags or custom data which will be passed to an event handler
@example
var eventOptions = {silent: true};

this.a = 1;

this.on('change:a', function() {
	alert('a is changed');
});

this.set('a', 2, eventOptions); // no alert
@example
var eventOptions = {f: 'yeah'};

this.a = 1;

this.on('change:a', function(eventOptions) {
	alert(eventOptions.f);
});

this.set('a', 2, eventOptions); // alerts "yeah"
*/


/**
A class (more precisely constructor of a class) returned by {@link Class} function
@typedef {function} class
@example
var MyClass = Class({
	method: function() { ... }
});
*/


/**
DOM node
@typedef node
*/

/**
DOM nodes collection. For example, jQuery-node(s)
@typedef $nodes
*/


/**
String
@typedef string
*/

/**
Boolean
@typedef boolean
*/

/**
Number
@typedef number
*/

/**
Object
@typedef object
*/

/**
Array
@typedef array
*/

/**
Function
@typedef function
*/

/**
null
@typedef null
*/

/**
Any type
@typedef *
*/