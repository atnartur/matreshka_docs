/**
@class Matreshka.Array
@classdesc The ``Matreshka.Array`` serves as collection class in Matreshka framework. It is inherited from the {@link Matreshka} class, obtaining all parent possibilities without exception. Besides, ``Matreshka.Array`` has all methods that ordinary array has.

#### All the methods which have been adopted from the built-in Array work like their originals.
A programmer familiar to the methods of native ``Array`` can understand immediately by means of which method adds (``push``, ``unshift``, ``splice``), deletes (``pop``, ``shift``, ``splice``), sorts (``sort``, ``reverse``) items etc. An exception from this rule is the ``forEach`` method which in its original form always returns ``undefined`` and in case with {@link Matreshka.Array} it returns itself for the chained call possibility. For the reason that methods work exactly the same as original ones, they are not presented in this documentation separately but they are gathered in the {@link Matreshka.Array#METHOD} section.
```js
this.push(1, 2, 3);
this.pop();
```

#### All methods adopted from built-in ``Array`` which modify an array can be called with an event object passing.

The ``method_`` syntax is used for this, where underscore at the end of a method name means that the last argument is an event object. Such methods are not given in this documentation because it is necessary to remember their syntax only. See {@link Matreshka.Array#METHOD_}.
```js
this.push_(1, 2, 3, {
	silent: true
});
this.pop_({
	silent: true
});
```

#### A developer has an opportunity of catching any data modification.

__While using a methods adopted from built-in ``Array``, events with corresponding name are fired.__ Calling the ``push`` method, the ``push`` event  is fired, calling the ``pull`` method, the ``pull`` event is fired,  calling the ``sort`` method, the ``sort`` event is fired, and so on... The list of arguments can be obtained addressing the ``args`` property.
```js
this.on('push', function(evt) {
	console.log(evt.args); // [1,2,3]
});

this.push(1, 2, 3);
```


__While adding items, the ``add`` and ``addone`` events are fired.__ The first one is fired once on adding (for example, you have added few items using ``push`` and the event has been called only once), the second one is fired once on every added item. On the ``add`` event triggering, an array of added items is passed to an event object (``added`` property) and on the ``addone`` triggering, each particular added item is passed to it.
```js
this.on('add', function(evt) {
	console.log(evt.added); // [1,2,3]
});

this.push(1, 2, 3);
```
```js
// the handler will be launched three times,
// as three new item have been added to the array
this.on('addone', function(evt) {
	console.log(evt.added); // 1 ... 2 ... 3
});

this.push(1, 2, 3);
```


__On removing items the same logic is observed__: ``remove`` triggers once even though several items have been removed and the ``removeone`` event triggers for each removed item individually. Removed items are contained in the ``removed`` property of an event object.
```js
this.push(1, 2, 3, 4, 5);

this.on('remove', function(evt) {
	console.log(evt.removed); // [2,3,4]
});

this.splice(1, 3);
```
```js
this.push(1, 2, 3, 4, 5);

// the handler will be launched three times,
// as three items have been removed from the array
this.on('removeone', function(evt) {
	console.log(evt.removed); // 2 ... 3 ... 4
});

this.splice(1, 3);
```
__On every modification of an array the ``modify`` event is fired__, allowing to catch all changes in the array (adding, removing, re-sorting) without any exception.
```js
this.on('modify', function(evt) {
	...
});
```

__``length`` is an ordinary property which can be bound to HTML node__  or you can catch changes using the ``change:length`` event.

> For example, on adding three items using the ``push`` method with three arguments, the following events: ``push``, ``add``, ``addone`` (three times), ``modify``, ``change:length`` are fired..

#### Model
The {@link Matreshka.Array#Model} property specifies a model class of items that an array contains. Its behavior is very similar to ``model`` property from ``Backbone.Collection``. It is recommended to inherit ``Model`` from the {@link Matreshka.Object} class or the {@link Matreshka.Array} one (in case if it is necessary to get a collection of collections) in order to get the opportunity of converting an array into an ordinary one by using the {@link Matreshka.Array#toJSON} method.
```js
// define Model
var MyModel = Class({
	// it is inherited from MK.Object
	'extends': MK.Object,
	constructor: function(data) {
		// set passed properties by jset method
		this.jset(data);
	}
});

// define the class for a collection
var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel
});

// create class instance
var myArray = new MyArray();

// add two items
myArray.push({
	a: 1,
	b: 2
}, {
	a: 3,
	b: 4
})

// will return [{a: 1, b: 2}, {a: 3, b: 4}]
myArray.toJSON();
```

#### Automatic rendering
``Matreshka.Array`` can render HTML nodes on a page automatically **in any modifications** of an array. The {@link Matreshka.Array#itemRenderer} property is used for that. You do not have to worry about rebuilding the HTML tree, ``Matreshka.Array`` does it for you. The example of the usage of automatic list rendering is below.
```html
<ul class="my-list"></ul>
```
```js
var MyModel = MK.Class({
	'extends': MK.Object,
	constructor: function(data) {
		this.jset(data);

		// wait for the 'render' event
		this.on('render', function() {
			// and bind the 'value' property
			// to the newly created <li> HTML node
			this.bindNode('value', ':sandbox', MK.binders.html());
		});
	}
});

var MyArray = MK.Class({
	'extends': MK.Array,
	Model: MyModel,
	// define the renderer for each item of the collection
	itemRenderer: '<li>',
	constructor: function() {
		// create a sandbox
		this.bindNode('sandbox', '.my-list');
	}
});

var myArray = new MyArray();
myArray.push({
	value: 'Hello'
}, {
	value: 'World'
});
```
For more detailed information read the documentation of {@link Matreshka.Array#itemRenderer}.

@see {@link Matreshka.Array#itemRenderer}
@see {@link Matreshka.Array#Model}
@see {@link Matreshka#bindNode}

@inherits Matreshka
@example <caption>An instance creation</caption>
new MK.Array();
@example <caption>An instance creation with length specifying</caption>
new MK.Array(42);
@example <caption>Items passing on creation</caption>
new MK.Array('Hi', {a: 'b'});
@example <caption>The inheritance</caption>
var MyClass = Class({
	'extends': MK.Array,
	constructor: function() {
		this.sayHello();
	},
	sayHello: function() {
		alert("Hello World!");
	}
});
@example <caption>The inheritance using ECMAScript 2015 syntax</caption>
class MyClass extends MK.Array {
	constructor() {
		this.sayHello();
	}
	sayHello() {
		alert("Hello World!");
	}
}
@example <caption>Data enumerating, using the for..of syntax from ECMAScript 2015</caption>
var mkArray = new MK.Array(1, 2, 3);
for(let item of mkArray) {
	console.log(item); // 1 .. 2 .. 3
}
@example <caption>Listening to events</caption>
this.on('modify', function( evt ) {
	alert('1) the ' + evt.method + ' method has been called');
});

this.on('shift', function(evt) {
	alert('2) the ' + evt.method + ' method has been called');
});

this.push(1); // 1) the push method has been called

this.shift(); // 1) the shift method has been called, 2) the shift method has been called

@example <caption>An event object passing to native-like ``Array`` method</caption>
this.on('modify', function(evt) {
	alert(evt.customData);
});

this.push_(1, {
	silent: true // event is not fired
});

this.shift_({
	customData: 42 // alerts 42
});
*/


/**
@member {boolean} Matreshka.Array#isMKArray
@summary ``isMKArray`` always equals ``true``. This property is used to define whether an object is an instance of the {@link Matreshka.Array} class.
@example
alert(object.isMKArray);
*/

/**
@member {boolean} Matreshka.Array#useBindingsParser
@summary The property turns off the parser if it is assigned ``false``
@see {@link Matreshka.Array#itemRenderer}
@example
var MyArray = Class({
	'extends': MK.Array,
	useBindingsParser: false,
	itemRenderer: '<li>{{property}}</li>'
});
*/

/**
@member {boolean} Matreshka.Array#renderIfPossible
@summary The ``renderIfPossible`` property cancels the array rendering if it equals ``false``
@see {@link Matreshka.Array#itemRenderer}
@example
var MyArray = Class({
    'extends': MK.Array,
	itemRenderer: '<li>'
    renderIfPossible: false,
    // ...
});
*/

/**
@member {string|function} Matreshka.Array#itemRenderer
@abstract
@since 0.1
@summary HTML string, selector or function which is responsible for rendering DOM nodes of an array on a page.
@param {matreshkaObject} model - An object, which will be rendered (in case you need to use some conditions)
@desc The ``itemRenderer`` overridable property which allows to render corresponded HTML nodes of items of an array without a programmer's participation. On a new item insertion into an array, HTML node is created automatically. This node becomes a sandbox (see. {@link Matreshka#bindNode}) for inserted item and it is inserted into HTML container which is defined in an array.

#### Where is created node inserted?
In order to define HTML container where rendered HTML nodes will be inserted, it is necessary to define a **container**. HTML sandbox should be declared for an array or a special ``container`` key should be bound to the HTML container for that.  Read more detailed information about bindings and sandboxes in {@link Matreshka#bindNode}.
Sandbox usage as a container:
```html
<ul class="my-list"></ul>
```
```js
var MyArray = Class({
	'extends': MK.Array,
	itemRenderer: '<li>',
	Model: MyModel,
	constructor: function() {
		// define a sandbox
		this.bindNode('sandbox', '.my-list');
	}
});
```
Now all newly created ``<li>``  nodes will get into the ``.my-list`` node.

If you do not want to insert HTML nodes straight into the sandbox, you can bind ``container`` property to needed HTML node. This logic is required in case if a sandbox is not limited by collection items alone and it includes other HTML nodes.
```html
<div class="my-widget">
	<h1>This is my awesome list</h1>
	<ul class="my-list"></ul>
</div>
```
```js
var MyArray = Class({
	'extends': MK.Array,
	itemRenderer: '<li>',
	Model: MyModel,
	constructor: function() {
		// define a sandbox
		this.bindNode('sandbox', '.my-widget');
		// define a container for HTML nodes
		this.bindNode('container', '.my-list');
	}
});
```
In the example above the HTML nodes will be inserted into ``.my-list`` instead of ``.my-widget``.

The ``itemRenderer`` property supports a few variants of defining, but they all must contain or return the only HTML node.

#### HTML string as property value
As you can see from the example above ``itemRenderer`` can be defined as an HTML string.
```js
var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel,
	itemRenderer: '<div class="my-div">Be cool</div>',
	constructor: function() { ... }
});
```

#### A selector as property value
In case if you carry over the templates for the items to the HTML page, ``itemRenderer`` supports the selector as value. When this occurs, {@link Matreshka.Array} will search for HTML node in DOM tree and it will extract ``innerHTML`` of found node. In case if a node is not found, the exception will be thrown.

> HTML string is different from a selector due to the presence of the ``<`` symbol in a string.

```html
<script type="text/html" id="be-cool-template">
	<div class="my-div">Be cool</div>
</script>
```
```js
var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel
	itemRenderer: '#be-cool-template',
	constructor: function() { ... }
});
```

#### A function as property value
The usage of a function as the ``itemRenderer`` property value gives an additional code flexibility if it is necessary to dynamically generate HTML node for rendering. A function can return:

__HTML string__
```js
var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel,
	itemRenderer: function() {
		return '<div class="my-div">Be cool</div>';
	},
	constructor: function() { ... }
});
```

__A selector__
```js
var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel,
	itemRenderer: function() {
		return '#be-cool-template';
	},
	constructor: function() { ... }
});
```

__DOM node__
```js
var MyArray = Class({
	'extends': MK.Array,
	itemRenderer: function() {
		return document.createElement('div');
	}
});
```

#### Parent renderer overriding by the ``render`` property
Sometimes it is convenient to declare a renderer inside a {@link Matreshka.Array#Model model} class as ``Backbone`` does. The ``renderer`` property overrides the ``itemRenderer`` value if it is specified for a child item of a collection.
```js
var MyModel = Class({
	'extends': MK.Object,
	renderer: '<div class="my-div">Be cool</div>',
	constructor: function( data ) { ... }
});

var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel,
	itemRenderer: '<frameset>Not cool</frameset>',
	constructor: function() { ... }
});
```
In this case you do not have to designate ``itemRenderer`` at all because ``render`` of a child item adopts all its roles. The syntax remains the same:  HTML string, a selector or a function can be used.

#### The  ``render`` event
After an item has been inserted into an array and its HTML node has already been created but it hasn't been inserted into the container yet, the ``render`` event is fired on inserted item. After its triggering you can declare needed data bindings.

```html
<form class="my-form"></form>
```
```js
var MyModel = Class({
	'extends': MK.Object,
	constructor: function(data) {
		this.jset(data);

		// wait for the event triggering
		this.on('render', function() {
			this.bindNode('isChecked', ':sandbox .my-checkbox');
			this.bindNode('text', ':sandbox .text',
				MK.binders.html());
		});
	}
});

var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel,
	itemRenderer: '<label>\
		<input type="checkbox" class="my-checkbox">\
		<span class="text"></span>\
	</label>',
	constructor: function() {
		this.bindNode('sandbox', '.my-form');
		this.push({
			isChecked: true,
			text: 'Be cool'
		}, {
			isChecked: false,
			text: 'Produce shitcode'
		});
	}
});

var app = new MyArray();
```

The code above will create the following HTML tree:

```html
<form class="my-form">
	<label>
		<input type="checkbox" class="my-checkbox">
		<span class="text">Be cool</span>
	</label>
	<label>
		<input type="checkbox" class="my-checkbox">
		<span class="text">Produce shitcode</span>
	</label>
</form>
```

And it will bind the checkboxes to the corresponding ``isChecked`` and ``text`` properties. <a href="http://jsbin.com/zetuya/1/" target="_blank">The live example</a>

Remember, the opportunity of catching the delegated events is implemented in Matreshka. The array can catch an event of an item rendering itself, using the ``*@render`` event name (see the documentation of {@link #typedef-eventNames}).
```js
this.on('*@render', function(evt) {
	alert('Child item is rendered');
});
```

> Rendered HTML node becomes a sandbox for inserted item allowing to use the ``:sandbox`` selector and some other possibilities after rendering. If an item enters a few collections at once,  set the ``bindRenderedAsSandbox: false`` property to it so as to cancel this behavior.
```js
var MyModel = Class({
	'extends': MK.Object,
	bindRenderedAsSandbox: false
	// ...
});
```

#### ``onItemRender`` and ``onRender``

To improve the readability of the code and a small gain in performance, version 1.1 presents the new virtual method called {@link Matreshka.Array#onItemRender}, which can be used instead of ``render`` event. As second alternative, the ``onRender`` can be used for a model.

```js
var MyModel = Class({
	'extends': MK.Object,
	constructor: function(data) {
		this.jset(data);
	},
	onRender: function(evt) {
		this.bindNode('isChecked', ':sandbox .my-checkbox');
		this.bindNode('text', ':sandbox .text',
				MK.binders.html());
	}
});

var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel,
	itemRenderer: '...`,
	constructor: function() {
		//...
	},
	onItemRender: function(item, evt) {
		//...
	}
});

var app = new MyArray();
```

#### The template engine
If you have a look at the examples of using {@link Matreshka.Array} and {@link Matreshka.Array#itemRenderer}, you can notice that all logic which is responsible for the two-way and one-way data binding is contained in JavaScript code. It is one of the main Matreshka advantages. But when you develop a very simple collection which does not include complicated logic, lots of bindings, etc, you would like to have a shorter variant of the binding declaration. The template including bindings can be passed to ``itemRenderer`` for that. Starting version 1.1 the template engine is turned on by default.

```js
var MyArray = Class({
	'extends': MK.Array,
	Model: MK.Object,
	itemRenderer: '<label>\
		<input type="checkbox" checked="&#123;{isChecked}}">&#123;{text}}\
	</label>',
	constructor: function() {
		this.bindNode('sandbox', '.my-form');
		this.push({
			isChecked: true,
			text: 'Be cool'
		}, {
			isChecked: false,
			text: 'Produce shitcode'
		});
	}
});

var app = new MyArray();
```
The example above is completely the same as the previous one, but it does not require to create a separate class for the Model as we do not have to catch the ``render`` event and to declare bindings manually. <a href="http://jsbin.com/wabiyi/1/" target="_blank">Live example</a>

Pay attention:
The code speed is lower with the template engine than without it. It happens because of complex logic that implements it. If you want to turn it off you need: assign false to the {@link Matreshka.Array#useBindingsParser} or just don't use &#123;{KEY}} syntax (the engine works only when a node or HTML string includes double braces).

The template engine is powered by {@link Matreshka#parseBindings}.

#### The cancellation of rendering.
As is seen from above  if the ``render`` property of the child item is specified, ``Matreshka.Array`` will try to render it. In order to completely cancel rendering for an array, assign ``renderIfPossible: false``.
```js
var MyArray = Class({
	'extends': MK.Array,
	renderIfPossible: false,
	// ...
});
```

#### Moving object across few collections
By default, when you add an object to an array the Matreshka will try to render it using ``itemRenderer`` (if it's not rendered yet). It gives a great advantage in cases when you have two or more lists which include the same object. The lists react instantly on any change in the object.

But sometimes you just need to move an object across few collections without re-rendering it again. If you need to move object to another collection including its sandbox use the ``moveSandbox`` flag.

```js
this.push_(item, {
	moveSandbox: true
})
```

#### Reassigning the ``itemRenderer``
Starting version 1.1, when you reassign ``itemRenderer`` a collection rerenders automatically.
```js
this.itemRenderer = '<div class="new-renderer"></div>';
```
This ability allows to load renderer from server.
```js
// jQuery.get example
jQuery.get('templates/template.html', function(data) {
	this.itemRenderer = data;
}.bind(this));

// Fetch API example
fetch('templates/template.html')
	.then(function(resp) {
		return resp.text();
	})
	.then(function(data) {
		this.itemRenderer = data;
	}.bind(this));

// Fetch API + ECMAScript 2015 example
fetch('templates/template.html')
	.then(resp => resp.text())
	.then(data => this.itemRenderer = data);
```

#### Rendering of a collection that contains any kind of object
In the version 1.1, the biggest innovation is native objects support in methods like {@link Matreshka.bindNode}, {@link Matreshka.linkProps}, {@link Matreshka.mediate} and so on. This great opportunity did not spare the collection rendering. That means you no longer need to think about {@link Matreshka.Array#Model} value because array renderer supports any kind of object (including native ones).

```js
var MyArray = Class({
	'extends': MK.Array,
	// Model is not defined
	itemRenderer: ...
	constructor: function() { ... }
	onItemRender: function(item) {
		MK.bindNode(item, 'x', ':sandbox .some-node');
	}
})
```

To make sure that passed items are objects (not null or number etc) you can use native ``Object`` constructor as a model
```js
var MyArray = Class({
	'extends': MK.Array,
	Model: Object,
	itemRenderer: ...,
	constructor: function() { ... }
})
```

One more little example: the rendering of simple list:
```js
var MyArray = Class({
	'extends': MK.Array,
	itemRenderer: '<li>{{value}}</li>',
	constructor: function() {
		this.bindNode('sandbox', '.my-list');
	}
});

var arr = new MyArray();
arr.push({value: 'Item 1'}, {value: 'Item 2'});
```

@see {@link Matreshka#bindNode}
@see {@link Matreshka.Array#Model}

@example <caption>ECMAScript 2015</caption>
class MyArray extends MK.Array {
	get itemRenderer() {
		return '<div>';
	},
	constructor() { ... }
}

@example <caption>ECMAScript 7</caption>
class MyArray extends MK.Array {
	itemRenderer = '<div>';
	constructor() { ... }
}
*/


/**
@method Matreshka.Array#onItemRender
@abstract
@since 1.1
@summary A function which is launched before ``"render"`` event.
@desc To improve the readability of code and to get a little speed gain, in 1.1 version ``onItemRender`` virtual method has presented which can be used as a substitute for ``"render"`` event.

At the same time ``onRender`` method is called in a rendered element with the only argument - an event object.

@param {matreshka} item - A rendered node of a collection
@param {matreshka} renderEvt - ``"render"`` event object

@example
var MyModel = Class({
	'extends': MK.Object,
	constructor: function(data) {
		this.jset(data);
	},
	onRender: function(renderEvt) {
		this.bindNode('isChecked', ':sandbox .my-checkbox');
		this.bindNode('text', ':sandbox .text', MK.binders.html());
	}
});

var MyArray = Class({
	'extends': MK.Array,
	Model: MyModel,
	itemRenderer: '<li>',
	constructor: function() {
		this.bindNode('sandbox', '.my-form');
	},
	onItemRender: function(item, renderEvt) {
		// also do something
	}
});

var app = new MyArray();
*/


/**
@method Matreshka.Array#Model
@since 0.2
@abstract
@summary The property defines a class of items which will be inserted to a collection
@desc Every time items are added to an array, the built-in handler checks if added item is ``Model`` instance and converts it into the one if the check fails. This behavior is very similar to the ``model`` property from ``Backbone.Collection``. It is recommended to inherit ``Model`` from the {@link Matreshka.Object} or {@link Matreshka.Array} class (in case if it is necessary to get a collection of collections) to get an opportunity of an array conversion into ordinary one by means of the {@link Matreshka.Array#toJSON} method.

Use {@link Matreshka.Array#mediateItem} for more flexible control of an item class (for example, if you need to use one Model for certain items and another one - for others).

@see {@link Matreshka.Array#mediateItem}
@see {@link Matreshka.Array#itemRenderer}

@param {object} data - Data which have been passed to a constructor
@param {matreshkaArray} mkArray - An array where an item has been added to

@example
// define Model
var MyModel = Class({
	// it is inherited from MK.Object
	'extends': MK.Object,
	constructor: function(data, parentArray) {
		// set passed properties by jset method
		this.jset(data);
		this.doSomething();
	},
	doSomething: function() { ... }
});

// define collection class
var MyArray = Class({
    'extends': MK.Array,
    Model: MyModel
});

// create an instance
var myArray = new MyArray();

// add two items
myArray.push({
    a: 1,
    b: 2
}, {
    a: 3,
    b: 4
})

//  will return [{a: 1, b: 2}, {a: 3, b: 4}]
myArray.toJSON();

@example <caption>``Model`` and the ECMAScript 2015</caption>
class MyArray extends MK.Array {
	get Model() {
		return MyModel;
	}
}

@example <caption>``Model`` and the ECMAScript 7</caption>
class MyArray extends MK.Array {
	Model = MyModel;
	constructor() { ... }
}
*/


/**
@method Matreshka.Array#mediateItem
@since 0.1
@see {@link Matreshka.Array#Model}
@see {@link Matreshka#mediate}
@summary Transforms an item value while inserting.
@desc This method is used to define the typing for the inserted items. Note that calling of this method overrides the {@link Matreshka.Array#Model} property.
@example
// all the array items are numbers
this.mediateItem(Number);
@example
this.push(1, 2, 3, 4, 5);

// all the array items are strings
this.mediateItem(function(value) {
	return String(value);
});

this.push(6, 7);

this.unshift(true, {});

// ["true", "[object Object]", "1", "2", "3", "4", "5", "6", "7"]
console.log( mkArray.toJSON() );
@example <caption>The "conditional Model"</caption>
this.mediateItem(function(item) {
	if(item.something) {
		return new FirstModel(item);
	} else {
		return new SecondModel(item);
	}
});
*/


/**
@method Matreshka.Array#recreate
@fires recreate
@fires modify
@fires add
@fires addone
@fires remove
@fires removeone
@summary Recreates the {@link Matreshka.Array} instance.
@desc The method allows to convert any array (or an object which has ``"length"`` property) into the {@link Matreshka.Array} instance. If nothing has been passed as the first argument, the instance is cleansed.
@param {array} [array] - An array or array-like object
@param {eventOptions} [eventOptions] - An event object
@returns {matreshkaArray} self
@see {@link Matreshka.Array#trackBy}
@example
// cleanse the array and add 5 new items
this.recreate([1, 2, 3, 4, 5]);

// cleanse the array
this.recreate();
*/


/**
@method Matreshka.Array#restore
@since 1.3
@fires recreate
@fires modify
@fires add
@fires addone
@summary Restores {@link Matreshka.Array} instance from existing HTML nodes on a page.
@desc In case if a collection is pre-rendered on the page (eg via webserver), the method can restore collection from existing HTML nodes.

```html
<!-- One, Two, Three are prerendered -->
<ul class="collection-node">
	<li>One</li>
	<li>Two</li>
	<li>Three</li>
	<script type="text/html" class="renderer">
		<li></li>
	</script>
</ul>
```

```js
var MyModel = Class({
	'extends': MK.Object,
	constructor: function(data) {
		this.addDataKeys('value');
		this.set(data);
	},
	onRender: function() {
		this.bindNode('value', ':sandbox', MK.binders.html())
	}
});

var MyCollection = Class({
	'extends': MK.Array,
	itemRenderer: ':sandbox .renderer',
	constructor: function() {
		this
			.bindNode('sandbox', '.collection-node')
			.restore(':sandbox li');
	}
});

var myCollection = new MyCollection();
myCollection.push({
	value: 'Four'
});

console.log(myCollection.toJSON());
// [{value: 'One'}, {value: 'Two'}, {value: 'Three'}, {value: 'Four'}]
```

If ``selector`` arg isn't passed then the collection will be restored from child nodes that placed in a container (``"container"`` or ``"sandbox"``).

The method fires  ``"render"`` event and calls ``onRender`` and ``onItemRender`` functions (look at the {@link Matreshka.Array#onItemRender docs}) for every newly added item (similar to {@link Matreshka.Array#itemRenderer usual rendering}).

@param {selector} [selector] - A selector
@param {eventOptions} [eventOptions] - Event object
@returns {matreshkaArray} self
@example
this.restore();
*/


/**
@member {string} Matreshka.Array#trackBy
@since 1.2
@abstract
@summary ``trackBy`` property indicates a key of unique IDs for collection items.
@desc In case if a client and a server activelly communicate with each other and collection items have unique ID, then redrawing entire collection from scratch does not make sense. After the server respond with new collection, much better to check does the old collection contain objects which have the corresponding identifiers. If object ID from new collection matches object ID from old one, old object will be updated and used again. That means a new object (new instance of {@link Matreshka.Array#Model}) will not be created and new DOM node will not be rendered.

``trackBy`` says which property of collection item is an identifier. Using ``trackBy`` you can get great performance enhancement in cases when you render huge collections really.

``trackBy`` works only using {@link Matreshka.Array#recreate} because ``recreate`` is the only method which recreates collection from scratch.

In examples below ``_id`` key is used as identifier (you can use any other key).

```js
var MyArray = Class({
	'extends': MK.Array,
	trackBy: '_id'
	constructor: function() {
		//,,,
	}
});

var arr = new MyArray();

// adds 3 objects to the collection
arr.recreate([
	{_id: 0, name: 'Foo'},
	{_id: 1, name: 'Bar'},
	{_id: 2, name: 'Baz'}
]);

// the next recreate call
// removes an object with _id: 0
// adds an object with _id: 3
// updates an object with _id: 3 (changes name from Bar to BarNew)
// updates an object with _id: 2 (changes name from Baz to BazNew)
// resorts collection
arr.recreate([
	{_id: 1, name: 'BarNew'},
	{_id: 3, name: 'Qux'},
	{_id: 2, name: 'BazNew'}
]);
```

``trackBy`` can have ``"$index"`` value, allowing to update objects by their index in collection.
```js
var MyArray = Class({
	'extends': MK.Array,
	trackBy: '$index'
	constructor: function() {
		//,,,
	}
});

var arr = new MyArray();

// adds 3 objects to the collection
arr.recreate([
	{name: 'Foo'},
	{name: 'Bar'},
	{name: 'Baz'}
]);

// the next recreate call
// updates all 3 items with new "name"
// adds an object with name "Qux"
arr.recreate([
	{name: 'NewFoo'},
	{name: 'NewBar'},
	{name: 'NewBaz'},
	{name: 'Qux'}
]);
```

@see {@link Matreshka.Array#recreate}
*/

/**
@method Matreshka.Array#toArray
@summary Converts {@link Matreshka.Array} into an ordinary array, but it does not convert items it contains.
@returns {array}
@example
this.toArray();
*/


/**
@method Matreshka.Array#toNative
@summary Does the same as {@link Matreshka.Array#toArray}
@returns {array}
@example
this.toNative();
*/


/**
@method Matreshka.Array#rerender
@since 0.3
@summary Rerenders DOM nodes of items which are included into an instance.
@desc This method renders array items in an array container. If a node which is associated to an array item has already been created, the method reinserts it into the container or sandbox of the array instead of rerendering it all over again.

The method can be useful in case when items have been added to the array before declaring a sandbox or a container.

Starting with the 1.1 version, in order to make an array rerender itself regardless of the presence of the rendered nodes (for example, you use handlebars in itemRenderer), pass an object with ``forceRerender`` property which equals true to the method.

@param {object} [options] - An object with flags (there is an only ``forceRerender`` flag for the time being)
@returns {matreshkaArray} self
@example
this.rerender({
	forceRerender: true
});
*/



/**
@method Matreshka.Array#hasOwnProperty
@summary Returns ``true`` if a property is present in an instance (index or ``length`` property)
@returns {boolean}
@example
var mkArray = new MK.Array(42); // creates the array of the length 42

mkArray.hasOwnProperty(5); // true

mkArray.hasOwnProperty(100500); // false

mkArray.hasOwnProperty('length'); // true

mkArray.hasOwnProperty('blah'); // false
*/


/**
@method Matreshka.Array#toJSON
@summary Converts the instance and its items into native arrays and objects
@returns {object}
@example
var data = this.toJSON();
*/


/**
@method Matreshka.Array#pull
@since 0.1
@fires pull
@fires remove
@fires removeone
@fires modify
@summary Removes an item with specified index from an array and returns this item.
@param {string|number|*} index - An item index (a number or a string) which has to be removed or the deletee itself (which is neither a number nor a string)
@param {eventOptions} [evtOptions] - An event object in case if it is necessary to pass some data to event handlers or to set the ``silent`` flag which prevents events triggering.
@returns {*|null} A deletee or ``null``
@example <caption>Passing of an index</caption>
var removed;

this.recreate(['a', 'b', 'c']);

removed = this.pull(1);

alert(removed); // 'b'

alert(this.toString()); // 'a,c'
@example <caption>Passing of a deletee object</caption>
var object1 = {},
	object2 = {},
	object3 = {},
	removed;

this.push(object1, object2, object3);

removed = this.pull(object2);

alert(removed === object2); // true

alert(this.length); // 2
*/


/**
@method Matreshka.Array#each
@summary Works the same as the ``forEach`` method which enumerates array items
@param {function} callback - A function which is called on every iteration
@param {*} [thisArg] - An object which is used as ``this`` on calling ``callback``
@returns {matreshkaArray} self
@example
this.each(function(item, index) {
	console.log(index, item);
});
*/


/**
@method Matreshka.Array#METHOD
@summary Any method from ``Array.prototype``
@desc {@link Matreshka.Array} includes all the methods existing in the native JavaScript Array:
<ul>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank">concat</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank">join</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank">pop</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank">push</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank">reverse</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank">shift</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank">slice</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank">sort</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank">splice</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString"  target="_blank">toString</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank">unshift</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank">every</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank">filter</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank">forEach</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">indexOf</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf" target="_blank">lastIndexOf</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank">map</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank">some</a></li>
</ul>
Yet they work the same as the ``Array.prototype``. There are only a few remarks:
+ The ``forEach`` method returns an array itself instead of ``undefined``
+ The methods which return a new array (``splice``, ``slice``, ``filter``, ``map``...) originally, in Matreshka they return a new ``Matreshka.Array`` instance.

Moreover, the methods generate the events which are fired on any array modification. For more detailed information look at {@link Matreshka.Array}.

@see {@link Matreshka.Array#_METHOD}
@example
this.push(1, 2, 3);
@example
var mapped = this
	.forEach(function(value, index) {
		//...
	})
	.map(function(value, index) {
		//...
	})
;
alert(mapped.isMKArray);
@example
this.reverse();
*/

/**
@method Matreshka.Array#METHOD_
@summary Any method from ``Array.prototype`` with the possibility of passing event object.
@desc Having found out more about {@link Matreshka.Array#METHOD}, it becomes clear that the methods do not support an event object passing as they exactly duplicate the syntax and the number of arguments of the built-in ``Array``. The ``METHOD_`` syntax allows to pass some data to event handlers.

The list of available flags:
+ ``silent: true`` - disables event triggering
+ ``dontRender: true`` - disables {@link Matreshka.Array#itemRenderer rendering}
+ ``skipMediator: true`` - disables {@link Matreshka.Array#mediateItem mediators} and {@link Matreshka.Array#Model models}


@see {@link Matreshka.Array#METHOD}
@example
this.push_(1, 2, 3, {
    silent: true
});

this.pop_({
    silent: true
});
@example
this.on('modify', function(evt) {
	alert(evt.flag); // 42
});

this.push_(1, 2, 3, {
	flag: 42
});
*/


/**
@method Matreshka.Array.from
@since 1.1
@summary The function creates a new {@link Matreshka.Array} instance from array-like object.
@see {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from Array.from}
@param {object} arrayLike - Array-like object.
@param {function} [mapFn] - The mapping function which is called for each element of an array.
@param {*} [thisArg] - An object which is used as ``this`` on calling ``mapFn``
@returns {matreshkaArray}
@example
var mkArray = MK.Array.from([1, 2, 3, 4]);
@example
var mkArray = MK.Array.from([1, 2, 3, 4], function(item) {
	return item*2;
}, this);
*/


/**
@method Matreshka.Array.of
@since 1.1
@summary The function creates a new {@link Matreshka.Array} instance with a variable number of arguments, regardless of number or type of the arguments.
@see {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/of Array.of}
@returns {matreshkaArray}
@example
var mkArray = MK.Array.of(1, 2, 3, 4);
*/
