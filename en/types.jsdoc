/**
Event hsndler. Takes any arguments passed to {@link Matreshka#trigger}
@callback eventHandler
@param {...*} options - Any arguments
@example
var eventHandler = function() {
	console.log( arguments ); 
}
this.on( 'fyeah', eventHandler );
this.trigger( 'fyeah', 'foo', 'bar', 'baz' ); // logs 'foo', 'bar', 'baz'
*/


/**
{@link Matreshka} instance
@typedef {object} matreshka
*/

/**
{@link Matreshka.Object} instance
@typedef {object} matreshkaObject
*/


/**
{@link Matreshka.Array} instance
@typedef {object} matreshkaArray
*/


/**
{@link $b Balalaika} collection
@typedef {array} balalaika
*/


/**
Event name or space-delimited list of event names.

There are several types of event names:
- Arbitrary events
- ``change:KEY``
- ``DOM_EVENT::KEY``
- ``DOM_EVENT::KEY(.DELEGATED-SELECTOR)``
- ``DOM_EVENT::(.DELEGATED-SELECTOR-FROM-SANDBOX)``
- ``KEY@EVENT_NAME``
- ``@EVENT_NAME`` (for {@link Matreshka.Object} and {@link Matreshka.Array})
 
### Arbitrary events
Such event may be fired manually by programmer using {@link Matreshka#trigger} method
```js
this.on( 'x y z', function( message ) {
	alert( message );
});

this.trigger( 'y', '"y" event is fired' );
```
### Property change event
```js
this.on( 'change:x', function( evt ) {
	alert( evt.value );
});
this.x = 1;
```
### DOM events for bound nodes
DOM event name and key are separated by colon. Original DOM event is stored as ``domEvent`` property. Besides, event object contains few properties and methods taken from original DOM event: ``preventDefault``, ``stopPropagation``, ``which``, ``target`` and few Matreshka-specific keys (``key``, ``element``, ``elements``, ``self``).
```js
this.bindElement( 'x', '.my-button' );
this.on( 'click::x', function( evt ) {
	alert( 'clicked "x"' );
	console.log( evt.domEvent ); // MouseEvent
});
```
### Delegated DOM events for bound nodes
Use this syntax if you don't want to create another binding for click event or another simple event inside bound node. Selector goes to brackets after specified key. Original DOM event is stored as ``domEvent`` property.
```html
<div class="my-div">
	<button class="my-button"></button>
</div>
```
Compare two examples:
```js
this.bindElement( 'x', '.my-div' );
this.bindElement( 'y', '.my-button' );
this.on( 'click::y', function( evt ) {
	alert( 'clicked ".my-button"' );
});
```

```js
this.bindElement( 'x', '.my-div' );
this.on( 'click::x(.my-button)', function( evt ) {
	alert( 'clicked ".my-button"' );
});
```

First way forces us to bind button node before we add event listener. So we have to invent property name that will not be used anymore.

### Delegated DOM events for sandbox node
{@link Matreshka#bindNode As you know}, для того, чтоб объявить песочницу нужно всего-навсего связать специальный ключ ``sandbox`` с соответствующим элементом. Напоминаем, песочница нужна для того, чтоб привязки внутри экземпляра класса были ограничены одним элементом, не влезая на территорию другого экземпляра и не создавая конфликтов селекторов.

Синтаксис делегированных событий описан выше:
```js
this.bindElement( 'sandbox', '.my-div' );
this.on( 'click::sandbox(.my-button)', function( evt ) {
	alert( 'clicked ".my-button"' );
});
```

Но, есть более краткий способ записи такого события, без указания ключа ``sandbox``
```js
this.bindElement( 'sandbox', '.my-div' );
this.on( 'click::(.my-button)', function( evt ) {
	alert( 'clicked ".my-button"' );
});
```

Оригинальное DOM событие находится под ключём ``domEvent`` объекта события.

### Делегированные события Матрешки
Для того, чтоб отловить событие внутри свойства, если значением этого свойства является другой экземпляр Матрешки, можно использовать специальный синтаксис ``КЛЮЧ@ИМЯ_СОБЫТИЯ``. Таким образом, программисту не требуется всё время следить за значением свойства

Сравните два подхода. Первый - простой: слушаем изменения свойства, проверяем, является ли значение свойства экземпляром Матрешки, невешиваем обработчик.
```js
this.on( 'change:x', function() {
	if( this.x && this.x.isMK ) {
		this.x.on( 'y', function( message ) {
			alert( message );
		});
	}
});
this.x = new Matreshka;
this.x.trigger( 'y', '"y" event is fired' );
```

Вариант с использованием делегированных событий Матрешки выглядит многократно элегантнее.
```js
this.on( 'x@y', function( message ) {
	alert( message );
});
this.x = new Matreshka;
this.x.trigger( 'y', '"y" event is fired' );
```

### Делегированные события {@link Matreshka.Object} и {@link Matreshka.Array}
В предыдущем варианте делегированных событий мы заранее знаем ключ свойства. Так как {@link Matreshka.Object} и {@link Matreshka.Array} ведут себя как коллекции (у {@link Matreshka.Object} есть метод {@link Matreshka.Object#each} для перебора всех ключей, отвечающих за данные), мы заранее можем не знать под какими ключами или индексами будут содержаться нужные нам экземпляры. Для того, чтоб навесить обработчик неизвестное свойство, в эти классы был добавлен дополнительный синтаксический сахар: ``@ИМЯ_СОБЫТИЯ``.

Пример с {@link Matreshka.Object}.
```js
this.on( '@y', function( message ) {
	alert( message );
});
this.jset('x', new Matreshka );
this.x.trigger( 'y', '"y" event is fired' );
```

Пример с {@link Matreshka.Array}.
```js
this.on( '@y', function( message ) {
	alert( message );
});
this.push( new Matreshka );
this[0].trigger( 'y', '"y" event is fired' );
```

### Всевозможные комбинации
Все приведенные выше варианты синтаксиса можно комбинировать произвольным способом.
```js
this.on( '@click::x z@y', function() { ... } );
```
```js
this.on( 'property@click::(.my-selector)', function() { ... } );
```
```js
this.on( 'x@y@z', function() { ... } );
```
@typedef {string} eventNames
*/


/**
``binder`` (байндер, привязчик) содержит всю информацию о том, как синхронизировать значение свойства с привязанным к нему DOM элементом. Для всех методов байндера контекст (``this``) - соответствующий DOM узел.
@typedef {object} binder
@property {string|function} [on] - DOM событие (или список событий, разделенных пробелами), после срабатывания которого извлекается состояние DOM элемента и устанавливается свойство. Кроме этого, значением свойства может быть функция, которая устанавливает обработчик произвольным образом.
@property {function} [getValue] - Функция, которая отвечает за то, как извлечь значение (или "состояние") DOM элемента
@property {function} [setValue] - Функция, которая отвечает за то, как установить значение свойства DOM элементу
@property {function} [initialize] - Функция, которая запускается при инициализации привязки. Например, может быть использована для инициализации jQuery плагина.
@example
var binder = {
	on: 'click',
	getValue: function( options ) {
		return this.value;
	} 
	setValue: function( v, options ) {
		this.value = v;
	},
	initialize: function( options ) {
		alert( 'Binder is initialized. Initial input value=' + this.value );
	}
};

this.bindElement( 'a', '.my-checkbox', binder );
@example
var binder = {
	on: function( callback ) {
		this.onclick = callback;
	},
	getValue: function( options ) {
		return this.value;
	} 
	setValue: function( v, options ) {
		this.value = v;
	},
	initialize: function( options ) {
		alert( 'Binder is initialized. Initial input value=' + this.value );
	}
};

this.bindElement( 'a', '.my-checkbox', binder );
*/


/**
Объект события
@typedef {object} eventOptions
@desc Это обычный объект, которй может содержать служебные флаги или произвольные данные, которые попадут в обработчик события
@example
var eventOptions = { silent: true };

this.a = 1;

this.on( 'change:a', function() {
	alert( 'a is changed' );
});

this.set( 'a', 2, eventOptions ); // no alert
@example
var eventOptions = { f: 'yeah' };

this.a = 1;

this.on( 'change:a', function( eventOptions ) {
	alert( eventOptions.f );
});

this.set( 'a', 2, eventOptions ); // alerts "yeah"
*/


/**
Class (more precisely, class constructor) returned by {@link Class} function
@typedef {function} class
@example
var MyXClass = Class({
	method: function() { ... }
});
*/


/**
DOM node
@typedef node
*/

/**
DOM nodes collection. For example, jQuery-node(s)
@typedef $nodes
*/


/**
String
@typedef string
*/

/**
Boolean
@typedef boolean
*/

/**
Number
@typedef number
*/

/**
Object
@typedef object
*/

/**
Array
@typedef array
*/

/**
Function
@typedef function
*/

/**
null
@typedef null
*/

/**
Any type
@typedef *
*/