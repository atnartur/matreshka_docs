/**
Event handler. Takes any arguments passed to {@link Matreshka#trigger}
@callback eventHandler
@param {...*} options - Any arguments
@example
var eventHandler = function() {
	console.log(arguments); 
}
this.on('fyeah', eventHandler);
this.trigger('fyeah', 'foo', 'bar', 'baz'); // logs 'foo', 'bar', 'baz'
*/


/**
{@link Matreshka} instance
@typedef {object} matreshka
*/

/**
{@link Matreshka.Object} instance
@typedef {object} matreshkaObject
*/


/**
{@link Matreshka.Array} instance
@typedef {object} matreshkaArray
*/


/**
{@link $b Balalaika} collection
@typedef {array} balalaika
*/


/**
Event name or space-delimited list of event names.

There are several types of event names:
- Arbitrary events
- ``change:KEY``
- ``DOM_EVENT::KEY``
- ``DOM_EVENT::KEY(.DELEGATED-SELECTOR)``
- ``DOM_EVENT::(.DELEGATED-SELECTOR-FROM-SANDBOX)``
- ``KEY@EVENT_NAME``
- ``@EVENT_NAME`` (for {@link Matreshka.Object} and {@link Matreshka.Array})
 
### Arbitrary events
Sthis kind of event can be fired manually by you using {@link Matreshka#trigger} method
```js
this.on('x y z', function(message) {
	alert(message);
});

this.trigger('y', '"y" event is fired');
```
### Property change event
```js
this.on('change:x', function(evt) {
	alert(evt.value);
});
this.x = 1;
```

### The event which fired before property is changed
```js
this.on( 'beforechange:x', function( evt ) {
	alert( evt.value );
});
this.x = 1;
```
### DOM events for bound nodes
DOM event name and key are separated by double colon. Original DOM event is stored as ``domEvent`` property. Besides, event object contains few properties and methods taken from original DOM event: ``preventDefault``, ``stopPropagation``, ``which``, ``target`` and few Matreshka-specific keys (``key``, ``node``, ``$nodes``, ``self``).
```js
this.bindNode('x', '.my-button');

this.on('click::x', function(evt) {
	alert('clicked "x"');
	console.log(evt.domEvent); // MouseEvent
});
```
### Delegated DOM events for bound nodes
Use this syntax if you don't want to create another binding for click event or another simple event inside bound node. Selector goes to brackets after specified key. Original DOM event is stored as ``domEvent`` property.
```html
<div class="my-div">
	<button class="my-button"></button>
</div>
```
Compare two examples:
```js
this.bindNode('x', '.my-div');
this.bindNode('y', '.my-button');
this.on('click::y', function(evt) {
	alert('clicked ".my-button"');
});
```

```js
this.bindNode('x', '.my-div');
this.on('click::x(.my-button)', function(evt) {
	alert('clicked ".my-button"');
});
```

First way forces us to bind button node before we add event listener. So we have to invent property name that will not be used anymore.

### Delegated DOM events for sandbox node
If you want to add DOM event handler for an element from a sandbox, you can look at syntax described above:
```js
this.bindNode('sandbox', '.my-div');
this.on('click::sandbox(.my-button)', function(evt) {
	alert('clicked ".my-button"');
});
```

But we have more elegant way how to do it without use of ``sandbox`` key.
```js
this.bindNode('sandbox', '.my-div');
this.on('click::(.my-button)', function(evt) {
	alert('clicked ".my-button"');
});
```

Original DOM event is contained in ``domEvent`` property of ``evt``.

### Delegated Matreshka events
In order to catch an event "inside" a property, if a value of this property is another instance of ``Matreshka``, you can use a special syntax ``KEY@EVENT_NAME``. Thus, you don't need to monitor the value of the property to add event handler.

Look at two examples. Fitst is obvious: listen to property change event, check is value instance of ``Matreshka`` then add the event handler
```js
this.on('change:x', function() {
	if(this.x && this.x.isMK) {
		this.x.on('y', function(message) {
			alert(message);
		});
	}
});
this.x = new Matreshka();
this.x.trigger('y', '"y" event is fired');
```

You can make this job more elegant.
```js
this.on('x@y', function(message) {
	alert(message);
});
this.x = new Matreshka();
this.x.trigger('y', '"y" event is fired');
```

### Delegated Matreshka events for {@link Matreshka.Object} and {@link Matreshka.Array}

Example above requires us to know a key of a property. Since {@link Matreshka.Object} and {@link Matreshka.Array} instances are collections we don't know which keys we need to listen. You can add an event handler on unknown properties using syntax sugar "@EVENT_NAME"

{@link Matreshka.Object} example
```js
this.on('@y', function(message) {
	alert(message);
});
this.jset('x', new Matreshka);
this.x.trigger('y', '"y" event is fired');
```

{@link Matreshka.Array} example
```js
this.on('@y', function(message) {
	alert(message);
});
this.push(new Matreshka());
this[0].trigger('y', '"y" event is fired' );
```

### Any combinations
```js
this.on('@click::x z@y', function() { ... });
```
```js
this.on('property@click::(.my-selector)', function() { ... });
```
```js
this.on('x@y@z', function() { ... });
```
@typedef {string} eventNames
*/


/**
``binder`` contains all information about how to synchronize instance property value with DOM node state. Every member of a binder uses HTML node as context (``this``)
@typedef {object} binder
@property {string|function} [on] - DOM event (or space-delimited list of events) which tells when node state is changed. Besides, it accepts function as value if you need to catch change arbitrarily
@property {function} [getValue] - A function which tells how to retrieve value (state) from HTML node when DOM event is fired
@property {function} [setValue] - A function which tells how to change DOM node when property value is changed
@property {function} [initialize] - A function which calls before binding is launched. For example it can initialize some jQuery plugin
@example
var binder = {
	on: 'click',
	getValue: function(options) {
		return this.value;
	} 
	setValue: function(v, options) {
		this.value = v;
	},
	initialize: function(options) {
		alert('Binder is initialized. Initial input value=' + this.value);
	}
};

this.bindNode( 'a', '.my-checkbox', binder );
@example
var binder = {
	on: function(callback) {
		this.onclick = callback;
	},
	getValue: function(options) {
		return this.value;
	} 
	setValue: function(v, options) {
		this.value = v;
	},
	initialize: function(options) {
		alert('Binder is initialized. Initial input value=' + this.value);
	}
};

this.bindNode( 'a', '.my-checkbox', binder );
*/


/**
Event object
@typedef {object} eventOptions
@desc An object which can contain service flags or custom data which will be passed to an event handler
@example
var eventOptions = {silent: true};

this.a = 1;

this.on('change:a', function() {
	alert('a is changed');
});

this.set('a', 2, eventOptions); // no alert
@example
var eventOptions = {f: 'yeah'};

this.a = 1;

this.on('change:a', function(eventOptions) {
	alert(eventOptions.f);
});

this.set('a', 2, eventOptions); // alerts "yeah"
*/


/**
A class (more precisely constructor of a class) returned by {@link Class} function
@typedef {function} class
@example
var MyClass = Class({
	method: function() { ... }
});
*/


/**
DOM node
@typedef node
*/

/**
DOM nodes collection. For example, jQuery-node(s)
@typedef $nodes
*/


/**
String
@typedef string
*/

/**
Boolean
@typedef boolean
*/

/**
Number
@typedef number
*/

/**
Object
@typedef object
*/

/**
Array
@typedef array
*/

/**
Function
@typedef function
*/

/**
null
@typedef null
*/

/**
Any type
@typedef *
*/