/**
@function Class
@summary the class implementation based on the prototype inheritance.
@desc The ``Class`` function allows to use the classic OOP based on classes. For modern browsers classes are based on the prototype inheritance, but in Internet Explorer 8 the hack which allows to use accessors (getters and setters) is employed with the help of the Object.defineProperty function.
@param {object} prototype - The methods and properties
@returns {class} class (the class constructor to be exact)
@example
var A = Class({
	method1: function() { ... }
});

var B = Class({
	// B is inherited from A
	'extends': A,
	method2: function() { ... }
});

var C = Class({
	// ะก is inherited from B
	'extends': B,
	method2: function() {
		// calling the parent method
		B.prototype.method2.apply( this, arguments );
	},
	method3: function( a, b ) { ... }
});

var D = Class({
	// D is inherited from C
	'extends': C,
	method3: function( a, b ) {
		// calling the parent method
		C.prototype.method2.call( this, arguments );
	}
});
@example <caption>The usage of AMD (named modules)</caption>
retuire.config({
	paths: {
		'xclass': 'path/to/matreshka.min',
		'matreshka': 'path/to/matreshka.min',
		'balalaika': 'path/to/matreshka.min'
	}
});
require(['xclass', 'matreshka', 'balalaika'], function(Class, MK, $) {
	var MyClass = Class({
		'extends': MK,
		constructor: function() {
			// ...
		}
	});
});
@example <caption>The usage of AMD (unnamed module)</caption>
// Matreshka contains the Class and $b functions as static properties
require(['path/to/matreshka.min'], function(MK) {
	var MyClass = MK.Class({
		'extends': MK,
		constructor: function() {
			// ...
		}
	});
});

@example <caption>The usage of the ``Class`` function is a must for IE8, but it is not required in other browsers.  That is why Mtreshka  OOB supports any type of the prototype inheritance including the ECMAScript 2015 syntax.</caption>
class A extends B {
	constructor() {
		super();
		this.sayHello();
	}

	sayHello() {
		alert("Hello World!");
	}
}

@example <caption>**The ``instanceOf`` method**. The instances of the class which has been created with the help of the ``Class`` function include the ``instanceOf`` method that checks if the object is an instance of the specified class. This method is necessary only when your application needs IE8 support.</caption>
// for IE8 and other browsers
alert( this.instanceOf( MyClass ) );

// for ordinary browsers
alert( this instanceof MyClass );
*/


/**
@function $b
@version 1.0
@since 0.1
@extends Array
@summary Balalaika micro-library
@desc Balalaika is a tiny  (as of this writing -  605 bytes) jQuery-like library for working with DOM . It is inherited from ``Array.prototype`` and includes all the methods existing in the array:

<ul>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank">concat</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank">join</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank">pop</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank">push</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank">reverse</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank">shift</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank">slice</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank">sort</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank">splice</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString"  target="_blank">toString</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank">unshift</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank">every</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank">filter</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank">forEach</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">indexOf</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf" target="_blank">lastIndexOf</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank">map</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank">some</a></li>
</ul>

Besides, it includes several own methods: ``on``, ``off``, ``is``, ``extend``, the possibilities of the HTML parsing, the catching of the DOM-ready event and others. Balalaika is used by the internal organs of Matreshka only when  jQuery or another jQuery-like library is not enabled on the page.

@see {@link https://github.com/finom/balalaika Balalaika on Github}

@example <caption>The event object creation</caption>
$('.my-selector').on('click.namespace', function() {
    alert('I need my balalaika');
});

@example <caption>The handler removing</caption>
$('.my-selector').off('click.namespace');

@example <caption>The ``is`` method</caption>
$('.my-selector').on('click', function(evt) {
    if($(evt.target).is('.another-selector')) {
        alert('I need my balalaika');
    }
});

@example <caption>The ``extend`` method (the extension of one object by another one)</caption>
var myObject = {a:1};
$.extend(myObject,{
    b: 2
});

@example <caption>DOM-ready</caption>
$(function() {
    // Do something with DOM
});

@example <caption>Parsing</caption>
var elements = $('<div><span class="yeah"></span></div>');

@example <caption>Searching for one element in another one</caption>
var myElement = $('.my-selector', node);

@example <caption>The style setting</caption>
$('.my-selector').forEach(function(el) {
    $.extend( el.style, {
        width: '30px',
        backgroundColor: 'red'
    });
});

@example <caption>The event delegation</caption>
$('.my-selector').on('click', function(evt) {
    var node = evt.target;
    while(node !== this) {
        if($(node).is('.delegated-selector')) {
            // Handle it!
            break;
        }
        node = node.parentNode;
    }
});

@example <caption>A simple plug-in</caption>
$.fn.addClass = function( className ) {
    this.forEach( function( item ) {
        var classList = item.classList;
        classList.add.apply( classList, className.split( /\s/ ) );
    });
    return this;
};

@example <caption>The ``create`` function is an additional utility  for creating elements which comes standard with Matreshka. The first argument is the tag name, the second one -  the properties which extend the DOM object.</caption>
var div = $.create( 'div', {
	className: 'my-div',
	innerHTML: 'My DIV'
	dataset: {
		a: 1,
		b: 2
	}
});
*/
