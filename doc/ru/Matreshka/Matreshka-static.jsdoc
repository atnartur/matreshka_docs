/**
@method Matreshka.Class
@importance 2
@summary Реализация классов, основанная на прототипном наследовании
@desc Функция ``Class`` позволяет использовать классическое ООП в тех случаях, когда нельзя воспользоваться ECMAScript 2015 classes.

@param {object} prototype - Методы и свойства
@param {object} [statics] - Статичные методы и свойства

@returns {class} class (точнее, конструктор класса)
@example
var A = MK.Class({
	method1: function() { ... }
});

var B = MK.Class({
	// B наследуется от A
	'extends': A,
	method2: function() { ... }
});

var C = MK.Class({
	// С наследуется от B
	'extends': B,
	method2: function() {
		// вызов родительского метода
		B.prototype.method2.apply(this, arguments);
	},
	method3: function(a, b) { ... }
});

var D = MK.Class({
	// D наследуется от C
	'extends': C,
	method3: function(a, b) {
		// вызов родительского метода
		C.prototype.method2.call(this, arguments);
	}
});

@example <caption>Передача объекта со статичными методами и свойствами</caption>
var MyClass = MK.Class({
	method: function() { ... }
}, {
	staticProp: 'foo',
	staticMethod: function() {
		return 'bar';
	}
});

alert(MyClass.staticProp); // foo
alert(MyClass.staticMethod()); // bar

*/


/**
@method Matreshka.useAs$
@importance 3
@since 0.2
@summary Заставляет использовать определенную библиотеку для работы с DOM
@desc По умолчанию, Матрешка использует в качестве библиотеки ту, которая находится по ссылке ``window.$``. Если такой переменной нет в глобальном пространстве имен, либо же она не включает в себя необходимый набор методов, то используется встроенная микро библиотека.

Метод {@link Matreshka.useAs$} заставляет Матрешку использовать ту библиотеку, которую вы захотите использовать, не смотря на отсутствие таковой в глобальном пространстве имен или по другой причине (например, если используется две разных версии jQuery на странице). Желательно, чтобы метод был запущен перед объявлением какого-либо класса, так как никакой конвертации в объект новой библиотеки не происходит.
@param {function} $ - Любая библиотека (jQuery, Zepto, ``null`` для использоватья встроенной микро-библиотеки)
@todo Конвертировать все коллекции привязанных элементов в объект переданной библиотеки.
@example
Matreshka.useAs$(jQuery.noConflict());
*/


/**
@member {array} Matreshka.defaultBinders
@importance 1
@enum {function}
@summary Массив функций, возвращающих соответствующий байндер
@desc {@link Matreshka.defaultBinders} - массив функций, которые по очереди проверяют элемент на соответствие заданным в этих функциях правилам и возвращающих байндер (см. {@link #typedef-binder}). Этот массив используется тогда, когда в метод {@link Matreshka#bindNode} не был передан третий аргумент. Подробную информацию о привязках смотрите в документации к {@link Matreshka#bindNode}.
@see {@link Matreshka#bindNode}
@see {@link Matreshka.lookForBinder}
@example <caption>Кастомный чекбокс</caption>
// добавляем байндер в коллекцию байндеров
MK.binders.customCheckbox = function() {
	return {
		on: 'click',
		getValue: function() {
			return $(this).hasClass('checked');
		},
		setValue: function( v ) {
			$(this).toggleClass('checked', !!v);
		},
		initialize: function() {
			$(this).toggleClass('checked');
		}
	}
};

// метод unshift добавляет функцию в начало массива Matreshka.defaultBinders
MK.defaultBinders.unshift( function( element ) {
	// проверяем, есть ли у элемента класс "custom-checkbox"
	if($(element).hasClass('custom-checkbox')) {
		// если проверка пройдена, возвращаем новый байндер
		return MK.binders.customCheckbox();
	}
});

// ...

this.bindNode('myKey', '.custom-checkbox');
*/


/**
@method Matreshka.debounce
@importance 3
@since 0.3
@summary Запускает функцию лишь однажды после истечения таймера. С каждой попыткой запуска таймер обновляется
@desc Этот метод - реализация микропаттерна **debounce**, который решает проблему многократного вызова обработчика событий за определенный промежуток времени. См. пример и {@link http://habrahabr.ru/post/60957/ статью на Хабре}.
@param {function} f - Оригинальная функция,
@param {number} [duration=0] - Задержка
@param {*} [thisArg] - Контекст, в котором функция должна быть запущена
@example
var debounced = MK.debounce(function(x) {
	console.log(x);
}, 10);

for(var i = 0; i < 100; i++) {
	debounced(i);
}

// >>> 99
*/


/**
@method Matreshka.lookForBinder
@importance 3
@desc Возвращает байндер, соответствующий элементу. Если таковой не найден, возвращает ``undefined``. Функция использует {@link Matreshka.defaultBinders}.
@see {@link Matreshka#bindNode}
@see {@link Matreshka.defaultBinders}
@param {node} node
@returns {object} properties
@example
console.log(Matreshka.lookForBinder($('input[type="text"]')[0]));

// вернет объект
{
	on: 'keyup paste',
	getValue: function() { return this.value; },
	setValue: function(v) {
		if( this.value != v ) {
			this.value = v;
		}
	}
}
*/


/**
@method Matreshka.to
@importance 3
@since 1.1
@summary Функция, конвертирующая произвольную структуру объектов и массивов в экземпляры {@link Matreshka.Object} и {@link Matreshka.Array}
@returns {matreshka} новосозданный экземпляр Матрешки
@example
var mk = MK.to({
	a: 1,
	b: {
		c: 2
	},
	d: [{e: 1}, {e: 2}, {e: 3}]
});
*/


/**
@method Matreshka.on
@importance 3
@since 1.1
@summary Добавляет обработчик события
@desc Этот статичный метод работает так же, как и {@link Matreshka#on} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#on}
@example
var object = {};
MK.on(object, 'foo', function(evt) {
	alert(evt.hello);
});

MK.trigger(object, 'foo', {hello: 'World'});
*/


/**
@method Matreshka.once
@importance 3
@since 1.1
@summary Добавляет обработчик событий, который может быть вызван однажды
@desc Этот статичный метод работает так же, как и {@link Matreshka#once} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#once}
@example
var object = {};
MK.once(object, 'foo', function(evt) {
	//...
});
*/


/**
@method Matreshka.onDebounce
@importance 3
@since 1.1
@summary Добавляет обработчик события, вызываемый лишь однажды за определенный промежуток времени
@desc Этот статичный метод работает так же, как и {@link Matreshka#onDebounce} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#onDebounce}
@example
var object = {};
MK.onDebounce(object, 'foo', function(evt) {
	//...
});
*/

/**
@method Matreshka.trigger
@importance 3
@since 1.1
@summary Генерирует событие
@desc Этот статичный метод работает так же, как и {@link Matreshka#trigger} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#trigger}
@example
var object = {};
MK.on(object, 'foo', function(evt) {
	alert(evt.hello);
});

MK.trigger(object, 'foo', {hello: 'World'});
*/


/**
@method Matreshka.off
@importance 3
@since 1.1
@summary Удаляет обработчик события
@desc Этот статичный метод работает так же, как и {@link Matreshka#off} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#off}
@example
var object = {};
MK.on(object, 'foo', function(evt) {
	//...
});

MK.off(object, 'foo');
*/


/**
@method Matreshka.mediate
@importance 3
@since 1.1
@summary Трансформирует значение свойства при его изменении
@desc Этот статичный метод работает так же, как и {@link Matreshka#mediate} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#mediate}
@example
var object = {};
MK.mediate(object, 'x', String);
object.x = 42;
alert(typeof object.x); // string
*/


/**
@method Matreshka.setClassFor
@importance 3
@since 1.1
@summary Устанавливает класс для свойства
@desc Этот статичный метод работает так же, как и {@link Matreshka#setClassFor} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#setClassFor}
@example
var object = {};
MK.setClassFor(object, 'x', SomeClass);
object.x = {a: 42};
alert(this.x instanceof SubClass); // true
alert(this.x.a); // 42
*/


/**
@method Matreshka.linkProps
@importance 3
@since 1.1
@summary Создает зависимость значения одного свойства от значений других
@desc Этот статичный метод работает так же, как и {@link Matreshka#linkProps} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#linkProps}
@example
var object = {};
MK.linkProps(object, 'sum', 'a b', function(a, b) {
	return a + b;
});
object.a = 40;
object.b = 2;
alert(object.sum); // 42
*/


/**
@method Matreshka.bindNode
@importance 3
@since 1.1
@summary Связывает свойство объекта с HTML элементом
@desc Этот статичный метод работает так же, как и {@link Matreshka#bindNode} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#bindNode}
@example
var object = {};
MK.bindNode(object, 'x', '.my-node');
*/



/**
@method Matreshka.bindOptionalNode
@importance 3
@since 1.1
@summary Работает в точности так же, как и {@link Matreshka#bindNode} но не бросает исключение, если аргумент node - пустой массив, undefined или не существует
@desc Этот статичный метод работает так же, как и {@link Matreshka#bindOptionalNode} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#bindOptionalNode}
@example
var object = {};
MK.bindOptionalNode(object, 'x', '.my-node');
*/


/**
@method Matreshka.unbindNode
@importance 3
@since 1.1
@summary Разрывает связь между свойством и HTML элементом
@desc Этот статичный метод работает так же, как и {@link Matreshka#unbindNode} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#unbindNode}
@example
var object = {};
MK.unbindNode(object, 'x', '.my-node');
*/


/**
@method Matreshka.select
@importance 3
@since 1.1
@summary Возвращает элемент из песочницы, соответствующий селектору
@desc Этот статичный метод работает так же, как и {@link Matreshka#select} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {node|null}
@see {@link Matreshka#select}
@example
var object = {};
MK.bindNode(object, 'sandbox', '.app');
MK.select(object, '.my-element');
*/


/**
@method Matreshka.selectAll
@importance 3
@since 1.1
@summary Возвращает элементы из песочницы, соответствующие селектору
@desc Этот статичный метод работает так же, как и {@link Matreshka#selectAll} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {$nodes}
@see {@link Matreshka#selectAll}
@example
var object = {};
MK.bindNode(object, 'sandbox', '.app');
MK.selectAll(object, '.my-element');
*/


/**
@method Matreshka.set
@importance 3
@since 1.1
@summary Устанавливает значение свойства, позволяя передать объект события в качестве третьего аргумента
@desc Этот статичный метод работает так же, как и {@link Matreshka#set} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#set}
@example
var object = {};
MK.set(object, 'x', 42, {
	someOption: true
});
*/


/**
@method Matreshka.remove
@importance 3
@since 1.1
@summary Удаляет свойство
@desc Этот статичный метод работает так же, как и {@link Matreshka#remove} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {object} Первый аргумент
@see {@link Matreshka#remove}
@example
MK.remove(object, 'x');
*/

/**
@method Matreshka.parseBindings
@importance 3
@since 1.1
@summary Парсит DOM дерево, объявляя привязки свойств, заключенных в двойные фигурные скобки.
@desc Этот статичный метод работает так же, как и {@link Matreshka#parseBindings} и все его вариации, но принимает в качестве первого аргумента любой JavaScript объект.
@returns {$nodes} Коллекция DOM узлов (как правило, состоящая из одного элемента), переданная в функцию в качестве аргумента или, если аргументов нет, песочница
@see {@link Matreshka#parseBindings}
@example
var object = {};
var $node = MK.parseBindings(object, '<h3>Hello, &#123;{name}}</h3>');
object.name = 'Arthur Philip Dent';
*/


/**
@member {object} Matreshka.parserBrackets
@importance 3
@since 1.5
@summary Содержит скобки для {@link Matreshka#parseBindings парсера}
@desc Объект ``parserBrackets`` позволяет изменить стандартный синтаксис парсера привязок. Он содержит два свойства: ``left`` (левая скобка, по умолчанию "&#123;{") и ``right`` (правая скобка, по умолчанию "}}")
@example <caption>Заменяет поведение парсера, используя синтаксис ``[[=property]]`` вместо &#123;{property}}</caption>
MK.parserBrackets.left = '[[=';
MK.parserBrackets.right = ']]';
*/
