/**
@namespace Matreshka.binders
@module matreshka/binders
@importance 1
@desc Пространство имен для байндеров. Этот объект можно расширять собственными свойствами, чтоб не засорять глобальное пространство имен.

Примите во внимание небольшое соглашение: каждое свойство из коллекции ``Matreshka.binders`` должно быть оформлено в виде функции, возвращающей байндер.
@see {@link Matreshka#bindNode}
@see {@link Matreshka.defaultBinders}
@example
MK.binders.myCoolBinder = function(var1, var2) {
	return {
		on: 'click',
		getValue: function() { ... },
		setValue: function() { ... },
		initialize: function() { ... }
	};
};

this.bindNode('myKey', '.my-element',
	MK.binders.myCoolBinder('Hello', 'World'));
*/

/**
@function Matreshka.binders.html
@module matreshka/binders/html
@importance 2
@since 0.1
@summary Возвращает привязчик, меняющий ``innerHTML`` DOM элемента в зависимости от значения свойства экземпляра класса
@returns {binder}
@example
this.bindNode('myKey', '.my-element', MK.binders.html());
*/

/**
@function Matreshka.binders.display
@module matreshka/binders/display
@importance 2
@since 0.1
@summary Возвращает односторонний привязчик, меняющий видимость DOM элемент (используя ``style.display``), в зависимости от значения свойства экземпляра класса
@param {boolean} [switcher=true] - Если аргумент равен ``true``, то элемент прячется при ложном значении свойства, если равен ``false``, прячется при правдивом значении
@returns {binder}
@example
this.bindNode('myKey', '.my-element', MK.binders.display(true));
@example
this.bindNode('myKey', '.my-element', MK.binders.display(false));
*/

/**
@function Matreshka.binders.className
@module matreshka/binders/classname
@importance 2
@since 0.1
@summary Возвращает привязчик, который переключает имя класса DOM элемента в зависимости от значения свойства экземпляра класса. Если значение свойства нестрого равно ``true``, имя класса добавляется, в противном случае - убирается. Логику можно изменить, передав ``false`` вторым аргументом, и, таким образом, имя класса будет добавляться, когда значение свойства нестрого равно ``false`` и наоборот.
@param {string} className
@param {boolean} [switcher=true]
@returns {binder}
@example
this.bindNode('myKey', '.my-element', MK.binders.className('blah'));

this.myKey = true; // добавляет класс 'blah'

this.myKey = false; // убирает класс 'blah'
@example
this.bindNode('myKey', '.my-element', MK.binders.className('blah', false));

this.myKey = false; // добавляет класс 'blah'

this.myKey = true; // убирает класс 'blah'
*/

/**
@function Matreshka.binders.prop
@module matreshka/binders/prop
@importance 2
@since 0.3
@summary Возвращает привязчик, меняющий свойство DOM элемента на значение свойства экземпляра класса
@param {string} property
@returns {binder}
@example
this.bindNode('disabled', '.my-button', MK.binders.prop('disabled'));

// устанавливает свойство disabled = true для элемента
this.disabled = true;

// устанавливает свойство disabled = false для элемента
this.disabled = false;
*/

/**
@function Matreshka.binders.attr
@module matreshka/binders/attr
@importance 2
@since 0.3
@summary Возвращает привязчик, меняющий атрибут DOM элемента на значение свойства экземпляра класса
@param {string} attribute
@returns {binder}
@example
this.bindNode('image', 'img.my-image', MK.binders.attr('src'));

this.image = 'http://example.com/cats.jpg';
*/

/**
@function Matreshka.binders.input
@module matreshka/binders/input
@importance 3
@since 0.3
@summary Возвращает привязчик, связывающий свойство экземпляра класса с элементом ``input``. Напрямую привязчик использовать не обязательно, так как он входит в список {@link Matreshka.defaultBinders}.
@param {string} [type] - Тип инпута
@returns {binder}
@example
this.bindNode('myKey', '.my-input', MK.binders.input('range'));
*/


/**
@function Matreshka.binders.output
@module matreshka/binders/output
@importance 3
@since 1.4
@summary Возвращает привязчик, связывающий свойство экземпляра класса с элементом ``output``. Напрямую привязчик использовать не обязательно, так как он входит в список {@link Matreshka.defaultBinders}.
@returns {binder}
@example
this.bindNode('myKey', '.my-output', MK.binders.output()));
*/


/**
@function Matreshka.binders.textarea
@module matreshka/binders/textarea
@importance 3
@since 0.3
@summary Возвращает привязчик, связывающий свойство экземпляра с элементом ``textarea``. Напрямую привязчик использовать не обязательно, так как он входит в список {@link Matreshka.defaultBinders}.
@returns {binder}
@example
this.bindNode('myKey', '.my-textarea', MK.binders.textarea());
*/

/**
@function Matreshka.binders.select
@module matreshka/binders/select
@importance 3
@since 0.3
@summary Возвращает привязчик, связывающий свойство экземпляра с элементом ``select``. Напрямую привязчик использовать не обязательно, так как он входит в список {@link Matreshka.defaultBinders}.
@param {boolean} [multiple=false] - Является ли селект ``multiple``
@returns {binder}
@example
this.bindNode('myKey', '.my-select', MK.binders.select(true));
*/


/**
@function Matreshka.binders.progress
@module matreshka/binders/progress
@importance 3
@since 1.1
@summary Возвращает привязчик, связывающий свойство с экземпляра с элементом ``progress``. Напрямую привязчик использовать не обязательно, так как он входит в список {@link Matreshka.defaultBinders}.
@returns {binder}
@example
this.bindNode('myKey', '.my-progress', MK.binders.progress());
*/


/**
@function Matreshka.binders.text
@module matreshka/binders/text
@importance 2
@since 1.1
@summary Возвращает привязчик, меняющий ``textContent`` (текстовое содержимое) DOM элемента в зависимости от значения свойства экземпляра класса.
@desc {@link Matreshka.binders.text} позволяет вывести содержимое свойства как есть и немного улучшает производительность из-за отсутствия необходимости браузеру парсить HTML.
@returns {binder}
@example
this.bindNode('myKey', '.my-node', MK.binders.text());
*/


/**
@function Matreshka.binders.style
@module matreshka/binders/style
@importance 2
@since 1.1
@summary Возвращает привязчик, меняющий заданное свойство стиля DOM элемента в зависимости от значения свойства экземпляра класса.
@param {string} property - Свойство ``style`` (camel-cased)
@returns {binder}
@example
this.bindNode('myKey', '.my-node', MK.binders.style('backgroundColor'));
this.myKey = 'red'; // цвет фона ``.my-node`` стал красным
*/


/**
@function Matreshka.binders.dataset
@module matreshka/binders/dataset
@importance 2
@since 1.1
@summary Возвращает привязчик, меняющий заданное свойство объекта [dataset](https://developer.mozilla.org/ru/docs/Web/API/HTMLElement/dataset) DOM элемента в зависимости от значения свойства экземпляра класса.
@param {string} property - Свойство dataset
@returns {binder}
@example
this.bindNode('myKey', '.my-node', MK.binders.dataset('myProp'));
this.myKey = 'cool value';
*/
