/**
@function $b
@importance 2
@since 0.1
@extends Array
@summary bQuery micro-library
@desc bQuery (previously called Balalaika) is a tiny jQuery-like library for working with DOM. It is inherited from ``Array.prototype`` and includes all the methods existing in native Array:

<ul>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank">concat</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank">join</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank">pop</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank">push</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank">reverse</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank">shift</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank">slice</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank">sort</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank">splice</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString"  target="_blank">toString</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank">unshift</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank">every</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank">filter</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank">forEach</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">indexOf</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf" target="_blank">lastIndexOf</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank">map</a></li>
	<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank">some</a></li>
</ul>

Besides, it includes several own methods: ``on``, ``off``, ``is``, ``extend``, HTML parsing feature, DOM-ready feature and others. bQuery is used by the internal organs of Matreshka only when jQuery or another jQuery-like library is not enabled on a page.

@example <caption>Adding DOM event listener</caption>
$('.my-selector').on('click.namespace', function() {
    alert('hi');
});

@example <caption>Removing DOM event listener</caption>
$('.my-selector').off('click.namespace');

@example <caption>The ``is`` method</caption>
$('.my-selector').on('click', function(evt) {
    if($(evt.target).is('.another-selector')) {
        alert('hi');
    }
});

@example <caption>The ``extend`` method (extension of one object by another one)</caption>
var myObject = {a: 1};
$.extend(myObject,{
    b: 2
});

@example <caption>DOM-ready</caption>
$(function() {
    // Do something with DOM
});

@example <caption>Parsing</caption>
var elements = $('<div><span class="yeah"></span></div>');

@example <caption>Searching for one element in another one</caption>
var myElement = $('.my-selector', node);

@example <caption>Setting styles</caption>
$('.my-selector').forEach(function(el) {
    $.extend( el.style, {
        width: '30px',
        backgroundColor: 'red'
    });
});

@example <caption>The event delegation</caption>
$('.my-selector').on('click', function(evt) {
    var node = evt.target;
    while(node !== this) {
        if($(node).is('.delegated-selector')) {
            // Handle it!
            break;
        }
        node = node.parentNode;
    }
});

@example <caption>A simple plugin</caption>
$.fn.addClass = function(className) {
    this.forEach(function(item ) {
        var classList = item.classList;
        classList.add.apply(classList, className.split(/\s+/));
    });
    return this;
};

@example <caption>The ``create`` function is an additional utility for creating elements which comes standard with Matreshka. The first argument is a tag name, the second one - properties which extend DOM object.</caption>
var div = $.create('div', {
	className: 'my-div',
	innerHTML: 'My DIV',
	dataset: {
		a: 1,
		b: 2
	}
});

@example <caption>starting with version 1.1, function ``create`` has alternative syntax. A tag name can be passed as ``tagName`` property and list of children as ``children`` property.</caption>
var div = $.create({
	tagName: 'div',
	className: 'my-div',
	innerHTML: 'My DIV',
	children: [{
		tagName: 'span',
		className: 'div-child',
		innerHTML: 'first child'
	}, {
		tagName: 'span',
		className: 'div-child',
		innerHTML: 'second child'
	}]
});
*/
