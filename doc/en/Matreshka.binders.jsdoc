/**
@namespace Matreshka.binders
@module matreshka/binders
@importance 1
@desc The namespace for binders. This object can be extended by you so as not to make a mess of the global namespace.

Take a little agreement into consideration: every property from the ``Matreshka.binders`` collection must be made as a function which returns a binder.
@see {@link Matreshka#bindNode}
@see {@link Matreshka.defaultBinders}
@example
MK.binders.myCoolBinder = function(var1, var2) {
	return {
		on: 'click',
		getValue: function() { ... },
		setValue: function() { ... },
		initialize: function() { ... }
	};
};

this.bindNode('myKey', '.my-element',
	MK.binders.myCoolBinder('Hello', 'World'));
*/

/**
@function Matreshka.binders.html
@module matreshka/binders/html
@importance 2
@since 0.1
@summary Returns data binder which changes ``innerHTML`` of bound DOM node depending on instance property value.
@returns {binder}
@example
this.bindNode('myKey', '.my-element', MK.binders.html());
*/

/**
@function Matreshka.binders.display
@module matreshka/binders/display
@importance 2
@since 0.1
@summary Returns data binder which controls a visibility of DOM node (using ``style.display``) depending on the instance property value
@param {boolean} [switcher=true] - If the argument equals ``true``, the node is hidden when a property value is falsy; if it equals ``false``, it is hidden when the property value is truly.
@returns {binder}
@example
this.bindNode('myKey', '.my-element', MK.binders.display(true));
@example
this.bindNode('myKey', '.my-element', MK.binders.display(false));
*/

/**
@function Matreshka.binders.className
@module matreshka/binders/classname
@importance 2
@since 0.1
@summary Returns data binder which switches over DOM node class name depending on instance property value. If property value equals ``true`` non-strictly, a class name is added, otherwise - it's removed. The logic can be changed by passing ``false`` as the second argument and in this way, a class name will be added  when a property value equals ``false`` non-strictly and vice versa.
@param {string} className
@param {boolean} [switcher=true]
@returns {binder}
@example
this.bindNode('myKey', '.my-element', MK.binders.className('foo'));

this.myKey = true; // adds the 'foo' class

this.myKey = false; // removes the 'foo' class
@example
this.bindNode('myKey', '.my-element', MK.binders.className('foo', false));

this.myKey = false; // adds the 'foo' class

this.myKey = true; // removes the 'foo' class
*/

/**
@function Matreshka.binders.prop
@module matreshka/binders/prop
@importance 2
@since 0.3
@summary Returns data binder which changes given property of DOM node depending on instance property value.
@param {string} property
@returns {binder}
@example
this.bindNode('disabled', '.my-button', MK.binders.prop('disabled'));

// sets disabled = true property for the node
this.disabled = true;

// sets disabled = false property for the node
this.disabled = false;
*/

/**
@function Matreshka.binders.attr
@module matreshka/binders/attr
@importance 2
@since 0.3
@summary Returns data binder which changes an attribute of DOM node depending on instance property value
@param {string} attribute
@returns {binder}
@example
this.bindNode('image', 'img.my-image', MK.binders.attr('src'));

this.image = 'http://example.com/cats.jpg';
*/

/**
@function Matreshka.binders.input
@module matreshka/binders/input
@importance 3
@since 0.3
@summary Returns data binder which binds instance property to an ``input`` value. It is not obligatory to use the binder directly because it is included in the {@link Matreshka.defaultBinders} list.
@param {string} [type] - Input type
@returns {binder}
@example
this.bindNode('myKey', '.my-input', MK.binders.input('range'));
*/


/**
@function Matreshka.binders.output
@module matreshka/binders/output
@importance 3
@since 0.3
@summary Returns data binder which binds instance property to an ``output`` value. It is not obligatory to use the binder directly because it is included in the {@link Matreshka.defaultBinders} list.
@returns {binder}
@example
this.bindNode('myKey', '.my-input', MK.binders.output());
*/


/**
@function Matreshka.binders.textarea
@module matreshka/binders/textarea
@importance 3
@since 0.3
@summary Returns data binder which binds instance property to a ``textarea`` value. It is not obligatory to use the binder directly because it is included in the {@link Matreshka.defaultBinders} list.
@returns {binder}
@example
this.bindNode('myKey', '.my-textarea', MK.binders.textarea());
*/

/**
@function Matreshka.binders.select
@module matreshka/binders/select
@importance 3
@since 0.3
@summary Returns data binder which binds instance property to a ``select`` value. It is not obligatory to use the binder directly because it is included in the {@link Matreshka.defaultBinders} list.
@param {boolean} [multiple=false] - If select is ``multiple``
@returns {binder}
@example
this.bindNode('myKey', '.my-select', MK.binders.select(true));
*/


/**
@function Matreshka.binders.progress
@module matreshka/binders/progress
@importance 3
@since 1.1
@summary Returns data binder which binds instance property to a ``progress`` value. It is not obligatory to use the binder directly because it is included in the {@link Matreshka.defaultBinders} list.
@returns {binder}
@example
this.bindNode('myKey', '.my-progres', MK.binders.progress());
*/


/**
@function Matreshka.binders.text
@module matreshka/binders/text
@importance 2
@since 1.1
@summary Returns data binder which changes ``textContent`` of bound DOM node depending on instance property value.
@returns {binder}
@example
this.bindNode('myKey', '.my-progres', MK.binders.text());
*/


/**
@function Matreshka.binders.style
@module matreshka/binders/style
@importance 2
@since 1.1
@summary Returns data binder which changes given style property of bound DOM node depending on instance property value.
@param {string} property - A property of ``style`` object (camel-cased)
@returns {binder}
@example
this.bindNode('myKey', '.my-progres', MK.binders.style('backgroundColor'));
this.myKey = 'red'; // background-color of .my-progress is red now
*/


/**
@function Matreshka.binders.dataset
@module matreshka/binders/dataset
@importance 2
@since 1.1
@summary Returns data binder which changes given [dataset](https://developer.mozilla.org/ru/docs/Web/API/HTMLElement/dataset) property of bound DOM node depending on instance property value.
@param {string} property - A property of ``dataset`` object
@returns {binder}
@example
this.bindNode('myKey', '.my-progres', MK.binders.dataset('myProp'));
this.myKey = 'cool value';
*/
