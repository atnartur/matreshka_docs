/**
@class Matreshka
@importance 1
@lang en
@alias MK
@see {@link Class}
@classdesc The class ``Matreshka`` is a core of the Matreshka.js framework which is inherited by {@link Matreshka.Array}, {@link Matreshka.Object} and every class of the application you create. It contains the main functionality of the framework, among which there are some very useful functions, such as {@link Matreshka#mediate mediators}, {@link Matreshka#linkProps dependencies}, {@link Matreshka#bindNode two-way data binding}, {@link Matreshka#on an event engine}, etc. The inheritance of this class, the same as the inheritance of any other class, is carried out with the help of the {@link Class} function.

This class, (like {@link Matreshka.Array} and {@link Matreshka.Object}), usually isn't used directly. Instead, it is inherited by the classes that you create. Therefore, the examples to the properties and methods in this documentation, as a rule, will be given with the use of ``this`` keyword.
@example <caption>Creating of an instance</caption>
var mk = new Matreshka();
@example <caption>You can use ``MK`` variable instead of ``Matreshka``</caption>
var mk = new MK();
@example <caption>Inheritance</caption>
var MyClass = MK.Class({
	'extends': Matreshka,
	constructor: function() {
		this.sayHello();
	},
	sayHello: function() {
		alert("Hello World!");
	}
});
@example <caption>Matreshka uses prototypes for implementing the inheritance. The {@link Class} function just brings in some syntactic sugar. That's why you can use any other way of the inheritance you like, for example, using classes from ECMAScript 2015</caption>
class MyClass extends Matreshka {
	constructor() {
		this.sayHello();
	}
	sayHello() {
		alert("Hello World!");
	}
}
*/


/**
@member {$nodes} Matreshka#$nodes
@importance 2
@since 1.1
@summary An object contains collections (jQuery, Zepto, built-in micro-library instance inherited from ``Array.prototype``) of bound nodes for quick access.
@see {@link Matreshka#bindNode}
@example
this.bindNode('myKey', '.my-node');
this.$nodes.myKey; // the same as $('.my-node')
*/


/**
@member {node} Matreshka#nodes
@importance 2
@since 1.1
@summary The object contains bound elements in the form of separate DOM nodes for quick access.
@desc Pay attention, every object property has got the first node of the bound ones to the corresponding property. Use {@link Matreshka#$nodes} for getting all the nodes bound to a certain property.
@see {@link Matreshka#bindNode}
@example
this.bindNode('myKey', '.my-node');
this.nodes.myKey; // the same as $('.my-node')[0]
*/




/**
@method Matreshka#bindOptionalNode
@importance 2
@since 0.3
@summary Works just the same as {@link Matreshka#bindNode} but it does not throw an exception if the ``node`` argument is an empty array, ``undefined`` or non-existent.
@see {@link Matreshka#bindNode}
@example
this.bindOptionalNode('myKey', '.my-element');
*/


/**
@method Matreshka#selectAll
@importance 2
@summary Returns HTML nodes corresponding to a selector from the sandbox
@desc After sandbox creation by the {@link Matreshka#bindNode} method, you can get and use HTML nodes which are located in it. Besides, the method supports the ``:bound(KEY)`` selector
@param {string} selector - A selector
@returns {$nodes}
@example
this.bindNode('sandbox', '.app');
this.selectAll('.my-element');
// the same as
this.$nodes.sandbox.find('.my-element');
// the same as
$('.app').find('.my-element');

@example <caption>The ``:bound(KEY)`` selector</caption>
this.bindNode('myKey', '.my-element');
this.selectAll(':bound(myKey) .my-another-element');
// the same as
this.$nodes.myKey.find('.my-another-element');
// the same as
$('.my-element').find('.my-another-element');
*/


/**
@method Matreshka#$
@importance 2
@variation instance
@summary Does the same as {@link Matreshka#selectAll}
@example
this.$('.my-element');
*/


/**
@method Matreshka#select
@importance 2
@summary Returns HTML node corresponding to a selector from the sandbox
@desc The method is very similar to {@link Matreshka#selectAll}, but it returns only one element or ``null``
@param {string} selector - A selector
@returns {node|null}
@example
this.bindNode('sandbox', '.app');
this.select('.my-element');
// the same as
this.nodes.sandbox.querySelector('.my-element');
// the same as
$('.app').find('.my-element')[0];
*/


/**
@method Matreshka#mediate
@importance 2
@since 0.1
@summary Transforms property value on its changing
@desc This method is used for transforming the property value on its changing. For example, you want the property value to be always either of a certain type or an integer value, or to be no less than zero and no more than a hundred etc.
@param {string|array} key - A key or an array of keys or a list of keys which are separated by spaces
@param {function} mediator - A function-mediator which returns a new value
@example
this.mediate('x', function(value) {
	return String(value);
});

this.x = 1;

alert(typeof this.x); // "string"
@example <caption>A list of keys which are separated by spaces</caption>
this.mediate('x y', function(value) {
	return String(value);
});
@example <caption>An array of keys</caption>
this.mediate(['x', 'y'], function(value) {
	return String(value);
});
*/


/**
@method Matreshka#mediate
@importance 2
@variation 2
@since 0.1
@summary Alternative syntax of the {@link Matreshka#mediate} method which accepts "key-mediator" object as an argument
@param {object} keyMediatorPairs - An object with key-mediator properties
@example
this.mediate({
	x: String,
	y: Number,
	z: Boolean
});
this.x = 1;
this.y = 2;
this.z = 3;
alert(typeof this.x); // "string"
alert(typeof this.y); // "number"
alert(typeof this.z); // "boolean"
@example <caption>A list of keys which are separated by spaces</caption>
this.mediate({
	'u v': String,
	'w x': Number,
	'y z': Boolean
});
*/


/**
@method Matreshka#set
@importance 1
@fires change
@fires change:KEY
@fires beforechange
@fires beforechange:KEY
@summary Sets a property value allowing to pass an event object as the third argument
@desc The list of the supported flags:
+ ``silent`` -  do not call the ``change`` and ``change:KEY`` events
+ ``silentHTML`` - do not change states of bound HTML nodes
+ ``force`` - call the ``change`` and ``change:KEY`` events even though the property value has not been changed
+ ``forceHTML`` - change a state of bound element even though the property value has not been changed. This option is usable if the bound element has been rendered after the binding (for example, some ``option`` tags have been added to ``select`` tag)
+ ``skipMediator`` - prevents the property transformation by a mediator (see {@link Matreshka#mediate})
+ ``skipLinks`` - prevents the work of dependencies created with {@link Matreshka#linkProps}
@param {string} key - A key
@param {*} value - A value
@param {eventOptions} [eventOptions] - An event object
@example
this.on('change:myKey', function(eventOptions) {
	alert(eventOptions.value);
});

// the same as this['myKey'] = 3
// or this.myKey = 3
// alerts 3
this.set('myKey', 3);
@example <caption>Using ``eventOptions``</caption>
this.on('change:myKey', function(eventOptions) {
	alert(eventOptions.value);
});

// handler isn't called
this.set('myKey', 4, {
	silent: true
});

@example <caption>Passing custom data to a handler</caption>
this.on('change:myKey', function(eventOptions) {
	alert(eventOptions.myCustomFlag);
});

// displays 42
this.set('myKey', 4, {
	myCustomFlag: 42
});
*/


/**
@method Matreshka#set
@variation 2
@summary Alternative "key-value" syntax of the {@link Matreshka#set} method
@param {object} keyValuePairs - An object containing key-value pairs
@param {eventOptions} [eventOptions] - An event object
@example
this.set({
	myKey1: 1,
	myKey2: 2
});
@example <caption>Passing  ``eventOptions`` as second argument</caption>
this.set({
	myKey: 3
}, {
	myFlag: 'Jigurda'
});
*/


/**
@method Matreshka#remove
@importance 3
@fires delete
@fires delete:KEY
@summary Deletes a property
@param {string} key - A key or keys which are separated by a space
@param {eventOptions} [eventOptions] - An event object
@returns {matreshka} self
@example
this.remove('myKey');
this.remove('myKey1 myKey2');
@example <caption>Using  ``eventOptions``</caption>
this.remove('myKey', {
	silent: true
});
*/
